# -*- coding: utf-8 -*-
"""인천국제공항공사_미래 데이터 수집 모듈_도착.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ol4aypzL9ZGkw6_W-08Nz-Y4sFqJvTiv
"""

import csv
from pandas import Series, DataFrame
import pandas as pd
import requests
import json
from os import name
import xml.etree.ElementTree as ET
import pandas as pd
from bs4 import BeautifulSoup
from lxml import html
from urllib.parse import urlencode, quote_plus, unquote
import re
import numpy as np
import pandas as pd
import time
import pickle
import gzip
import pprint
from datetime import datetime
from datetime import timedelta
##API Key
serviceKey = 'Enter your API KEY'

######Part 1-1 현재일자 기준 인천도착 미래 정기 운항 스케줄 호출(국내선, 국제선 포함)
import requests
from bs4 import BeautifulSoup
data=[]
url = 'https://apis.data.go.kr/B551177/StatusOfPaxFltSched/getPaxFltSchedArrivalsDeOdp'
params ={'serviceKey' : serviceKey, 'numOfRows' : 100 }
response = requests.get(url, params=params)
soup_inc = BeautifulSoup(response.text, 'html.parser')
data = []
for item in soup_inc.find_all('item'):
    item_data = {}
    for tag in item.find_all():
        item_data[tag.name] = tag.text
    data.append(item_data)

df_inc_in= pd.DataFrame(data)
##df_inc.head()

###airport 체계가 한국공항공사와 달라서 확인 필요함 (ex: 보홀 팡라오)

######Part 1-2 현재일자 기준 인천 출발하는 항공편
##미래 데이터 적재를 위한 loop
#현재 날짜 가져옴
##today = datetime.today()
today = datetime.today()
data_inc_to_load = []

#미래 30일 데이터
for _ in range(30):
    for index, row in df_inc_in.iterrows():
        # 날짜 포맷을 고려해 날짜 데이터를 가져옴
        start_date = datetime.strptime(row['firstdate'], '%Y%m%d')
        end_date = datetime.strptime(row['lastdate'], '%Y%m%d')

        # 오늘의 요일을 가져와 대응하는 열을 확인
        today_weekday = today.strftime('%A').lower()

        # 오늘이 시작일자와 종료일자 사이에 있고 해당 요일에 운행하는 경우 데이터를 삽입
        if start_date <= today <= end_date and row[today_weekday] == 'Y':
            row['date'] = today.date()
            data_inc_to_load.append(row)

    # 다음 날짜로 이동
    today += timedelta(days=1)

# 적재된 데이터 출력
df_inc_in = pd.DataFrame(data_inc_to_load)
##result_df.to_csv('test.csv', header=True, encoding='cp949')
df_inc_in.head()

#####Part 1-3 데이터 프레임 전처리 및 현재 테이블 레이아웃에 맞게 변형하기 위한 함수 정의 및 국가/대륙 붙이기 위한 파일 import
##공항과 도시명 변환하기 위한 함수
def split_city_and_airport(row) :
    ##city_parts = row['city'].split('/')
    airport_parts = row['airport'].split('/')
    ##if len(city_parts)>1 :
    ##    row['city'] = city_parts[1]
    if len(airport_parts)>1 :
        row['airport'] = airport_parts[1]
    return row


country = pd.read_csv('airport-codes_csv.csv', keep_default_na=False)
country = country[(country.iata_code.notnull()) & (country.type != 'closed') & (country.type != 'heliport')].loc[:,['continent', 'iso_country', 'iata_code']]
country = country.drop_duplicates(keep='first').loc[country.drop_duplicates(keep='first').iata_code.drop_duplicates(keep=False).index, :]

#####Part 1-4 해외에서 도착하는 Outbound 편(target : tb_ex_flght_arvplc_gp)
#해외에서 도착하는 Inbound 항공편이기 때문에 도착지(citycode) 기준으로 join
df_inc_in = pd.merge(df_inc_in, country, how = 'left', left_on='airportcode', right_on='iata_code' )

##Outbound는 airport, airportcode가 출발지, city, citycode가 도착지
df_inc_in = df_inc_in.apply(split_city_and_airport, axis=1)  #공항과 도착지 변환 함수 적용

df_inc_in_fnl = pd.DataFrame()

##미래 데이터 API에서는 estimated_time 필드와 actual_time 필드는 그냥 :로 처리해 줄 수 밖에 없음
df_inc_in_fnl['airline'] = df_inc_in['airline']
df_inc_in_fnl['flight_no'] = df_inc_in['flightid']
df_inc_in_fnl['starting_point'] = df_inc_in['airportcode'] + '('  + df_inc_in['airport'] + ')'
df_inc_in_fnl['planned_time'] = df_inc_in['st'].str[:2] + ':' + df_inc_in['st'].str[2:]      ##hhmm 으로 있어서 hh:mm으로 변환 필요
df_inc_in_fnl['estimated_time'] = ':'
df_inc_in_fnl['actual_time'] = ':'
df_inc_in_fnl['type']  = '여객'   ###화물 확인하고 추가 변환 해줘야함!!!! 인천 데이터에는 화물 여객 구분 없음
df_inc_in_fnl['status'] = '출발예정'
df_inc_in_fnl['search_date'] = df_inc_in['date']
df_inc_in_fnl['airport'] = '인천'
df_inc_in_fnl['continent'] = df_inc_in['continent']
df_inc_in_fnl['iso_country'] = df_inc_in['iso_country']
df_inc_in_fnl['etl_tm'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')


########### s3에 떨구고 redshift tb_ex_flght_arvplc 테이블에 적재하는 로직만 쓰면됨

df_inc_in_fnl.head()





















